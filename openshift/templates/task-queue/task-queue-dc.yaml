apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: null
  name: itvr-task-queue-dc
parameters:
  - name: NAME
    displayName: null
    description: 'the module name entered when run yo bcdk:pipeline, which is itvr'
    required: true
  - name: SUFFIX
    displayName: null
    description: sample is -dev-97
    required: true
  - name: VERSION
    displayName: null
    description: image tag name for output
    required: true
  - name: CPU_REQUEST
    displayName: Requested CPU
    description: Requested CPU
    required: true
  - name: CPU_LIMIT
    displayName: CPU upper limit
    description: CPU upper limit
    required: true
  - name: MEMORY_REQUEST
    displayName: Requested memory
    description: Requested memory
    required: true
  - name: MEMORY_LIMIT
    displayName: Memory upper limit
    description: Memory upper limit
    required: true
  - name: REPLICAS
    value: '1'
    required: true
  - name: DJANGO_DEBUG
    value: 'False'
    required: true
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the task-queue image
      labels:
        shared: "true"        
      creationTimestamp: null
      name: '${NAME}-task-queue'
    spec:
      lookupPolicy:
        local: false
    status:
      dockerImageRepository: ''
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      name: '${NAME}-task-queue${SUFFIX}'
    spec:
      ports:
        - name: task-queue
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        name: '${NAME}-task-queue${SUFFIX}'
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      creationTimestamp: 
      annotations:      
        haproxy.router.openshift.io/timeout: 1200s      
      name: ${NAME}-task-queue${SUFFIX}
    spec:
      host: ${NAME}-task-queue${SUFFIX}.apps.silver.devops.gov.bc.ca
      path: /
      port:
        targetPort: task-queue
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: '${NAME}-task-queue${SUFFIX}'
        weight: 100
      wildcardPolicy: None
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
      creationTimestamp: null
      name: ${NAME}-task-queue${SUFFIX}
    spec:
      replicas: ${{REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        name: ${NAME}-task-queue${SUFFIX}
      strategy:
        activeDeadlineSeconds: 800
        recreateParams:
          mid:
            execNewPod:
              command:
                - /bin/sh
                - '-c'
                - |-
                  sleep 60
                  python ./manage.py migrate
                  python ./manage.py createcachetable
              containerName: task-queue
            failurePolicy: Retry
          timeoutSeconds: 600
        resources: {}
        resources: {}
        type: Recreate
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: ${NAME}-task-queue${SUFFIX}
        spec:
          containers:
            - name: task-queue
              image: null
              imagePullPolicy: IfNotPresent
              env:
                - name: DB_ENGINE
                  value: django.db.backends.postgresql
                - name: DB_HOST
                  value: itvr-spilo
                - name: DB_HOST_READONLY
                  value: itvr-spilo-readonly
                - name: DB_NAME
                  value: itvr
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: itvr-patroni-app
                      key: app-db-password
                - name: DB_PORT
                  value: "5432"
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: itvr-patroni-app
                      key: app-db-username
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: itvr-django-secret${SUFFIX}
                      key: DJANGO_SECRET_KEY      
                - name: DJANGO_SALT_KEY
                  valueFrom:
                    secretKeyRef:
                      name: itvr-django-salt${SUFFIX}
                      key: DJANGO_SALT_KEY
                - name: EMAIL_SERVICE_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: itvr-email-service
                      key: EMAIL_SERVICE_CLIENT_ID                      
                - name: EMAIL_SERVICE_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: itvr-email-service
                      key: EMAIL_SERVICE_CLIENT_SECRET
                - name: CHES_AUTH_URL
                  valueFrom:
                    secretKeyRef:
                      name: itvr-email-service
                      key: CHES_AUTH_URL                      
                - name: CHES_EMAIL_URL
                  valueFrom:
                    secretKeyRef:
                      name: itvr-email-service
                      key: CHES_EMAIL_URL
                - name: SENDER_EMAIL
                  valueFrom:
                    secretKeyRef:
                      name: itvr-email-service
                      key: SENDER_EMAIL      
                - name: SENDER_NAME
                  valueFrom:
                    secretKeyRef:
                      name: itvr-email-service
                      key: SENDER_NAME
                - name: SEND_EMAIL
                  value: 'True'
                - name: DJANGO_DEBUG
                  value: ${DJANGO_DEBUG}
                - name: DJANGO_TASKS
                  value: 'true'
              readinessProbe:  
                exec:
                  command:
                    - /bin/bash
                    - '-c'
                    - ls -l
                failureThreshold: 10
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 3
#              readinessProbe:
#                failureThreshold: 10
#                tcpSocket:
#                  port: 8080
#                initialDelaySeconds: 30
#                periodSeconds: 15
#                successThreshold: 1
#                timeoutSeconds: 3
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - task-queue
            from:
              kind: ImageStreamTag
              name: ${NAME}-task-queue:${VERSION}
            lastTriggeredImage: null
          type: ImageChange
        - type: ConfigChange
    status:
      availableReplicas: 0
      latestVersion: 0
      observedGeneration: 0
      replicas: 0
      unavailableReplicas: 0
      updatedReplicas: 0
